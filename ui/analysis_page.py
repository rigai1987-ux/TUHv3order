import streamlit as st
import pandas as pd
from datetime import datetime
import os

import logging
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from ml_model_handler import train_ml_model
from signal_generator import generate_signals
from trading_simulator import run_trading_simulation
from visualizer import save_figure_to_html, plot_single_trade, plot_ml_decision_boundary
from app_utils import get_basic_settings, manage_profiles, get_strategy_parameters, load_and_validate_data_files # type: ignore

def run_forced_ml_analysis(df, params):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π ML-–∞–Ω–∞–ª–∏–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–≥—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–Ω—å—à–µ –±—ã–ª–∞ –≤–Ω—É—Ç—Ä–∏ `show_analysis_page`.
    """
    logging.info("–ó–∞–ø—É—â–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π ML-–∞–Ω–∞–ª–∏–∑.")
    
    # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    base_signal_indices, _, _ = generate_signals(df, params, base_signal_only=True)
    logging.info(f"–®–∞–≥ 1: –ù–∞–π–¥–µ–Ω–æ {len(base_signal_indices)} –±–∞–∑–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

    # 2. –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    ml_results = train_ml_model(df, params, base_signal_indices)
    model = ml_results.get('model')
    logging.info(f"–®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {model is not None}.")

    if not model:
        reason = ml_results.get('failure_reason', "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –¥–∞–Ω–Ω—ã–µ.")
        logging.error(f"–®–∞–≥ 2 –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å ML-–º–æ–¥–µ–ª—å. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return None

    # 3. –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    features_for_prediction = ml_results['feature_df'].loc[base_signal_indices]
    X_scaled = ml_results['scaler'].transform(features_for_prediction)
    predictions = model.predict(X_scaled)
    
    # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    rejected_mask = predictions != 1
    rejected_indices = features_for_prediction.index[rejected_mask].tolist()
    logging.info(f"–®–∞–≥ 5: –ù–∞–π–¥–µ–Ω–æ {len(rejected_indices)} –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.")

    # 5. –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    temp_ml_results_for_plot = {'feature_importances': ml_results.get('feature_importances'), 'ml_features_df': ml_results['feature_df'], 'ml_rejected_signals': rejected_indices}
    return plot_ml_decision_boundary(df, temp_ml_results_for_plot, params)

def show_analysis_page():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤".
    """
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        position_size, commission, start_date, end_date = get_basic_settings("analysis")

        manage_profiles("analysis", get_strategy_parameters)
        
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–í–∏–ª–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)")

        st.markdown("**üìä –§–∏–ª—å—Ç—Ä –æ–±—ä—ë–º–∞**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input("vol_pctl (%)", value=float(st.session_state.get("vol_pctl_analysis", 1.0)), min_value=0.01, step=0.01, key="vol_pctl_analysis")
        with col2:
            st.number_input("vol_period", value=int(st.session_state.get("vol_period_analysis", 20)), min_value=1, step=1, key="vol_period_analysis")

        st.markdown("**üìè –§–∏–ª—å—Ç—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input("rng_pctl (%)", value=float(st.session_state.get("rng_pctl_analysis", 1.0)), min_value=0.01, step=0.01, key="rng_pctl_analysis")
        with col2:
            st.number_input("range_period", value=int(st.session_state.get("range_period_analysis", 20)), min_value=1, step=1, key="range_period_analysis")

        st.markdown("**üìâ –§–∏–ª—å—Ç—Ä NATR**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input("natr_min (%)", value=float(st.session_state.get("natr_min_analysis", 0.35)), min_value=0.01, step=0.01, key="natr_min_analysis")
        with col2:
            st.number_input("natr_period", value=int(st.session_state.get("natr_period_analysis", 10)), min_value=1, step=1, key="natr_period_analysis")

        st.markdown("**üìà –§–∏–ª—å—Ç—Ä —Ä–æ—Å—Ç–∞**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input("min_growth_pct (%)", value=st.session_state.get("min_growth_pct_analysis", 1.0), min_value=-100.0, max_value=100.0, step=0.01, key="min_growth_pct_analysis")
        with col2:
            st.number_input("lookback_period", value=int(st.session_state.get("lookback_period_analysis", 20)), min_value=1, step=1, key="lookback_period_analysis")

        st.markdown("**üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input("stop_loss_pct (%)", value=float(st.session_state.get("stop_loss_pct_analysis", 2.0)), min_value=0.01, step=0.01, format="%.2f", key="stop_loss_pct_analysis")
        with col2:
            st.number_input("take_profit_pct (%)", value=float(st.session_state.get("take_profit_pct_analysis", 4.0)), min_value=0.01, step=0.01, format="%.2f", key="take_profit_pct_analysis")

        st.checkbox(
            "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫", 
            value=st.session_state.get("invert_direction_analysis", False), 
            key="invert_direction_analysis", 
            help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã 'long' –±—É–¥—É—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω—ã –∫–∞–∫ 'short', –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç."
        )

        st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–ª–∫–∏**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input(
                "–û—Ç—Å—Ç—É–ø –≤–∏–ª–∫–∏ (%)", value=float(st.session_state.get("bracket_offset_pct_analysis", 0.5)),
                min_value=0.01, step=0.01, key="bracket_offset_pct_analysis", format="%.2f"
            )
        with col2:
            st.number_input(
                "–¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è (—Å–≤–µ—á–∏)", value=int(st.session_state.get("bracket_timeout_candles_analysis", 5)),
                min_value=1, step=1, key="bracket_timeout_candles_analysis"
            )

        st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏–º–∞–∫—Å–Ω—ã–π –≤—ã—Ö–æ–¥", value=st.session_state.get("use_climax_exit_analysis", False), key="use_climax_exit_analysis")
        if st.session_state.get("use_climax_exit_analysis"):
            col1, col2 = st.columns(2)
            with col1:
                st.number_input("–û–∫–Ω–æ", value=int(st.session_state.get("climax_exit_window_analysis", 50)), min_value=5, step=1, key="climax_exit_window_analysis")
            with col2:
                st.number_input("–ü–æ—Ä–æ–≥", value=float(st.session_state.get("climax_exit_threshold_analysis", 3.0)), min_value=0.1, step=0.1, key="climax_exit_threshold_analysis")

        # --- –ë–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ML ---
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ML –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
        # –∏ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ session_state –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä.
        if st.session_state.get("classifier_type_analysis"):
            st.markdown("---")
            st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã ML-–º–æ–¥–µ–ª–∏")
            st.info("–≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ —Å–∏–º—É–ª—è—Ü–∏–∏.")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏ —Ö—Ä–∞–Ω–∏–º —Ç–∏–ø –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            st.text_input("–¢–∏–ø –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞", value=st.session_state.get("classifier_type_analysis"), key="classifier_type_analysis", disabled=True)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏ —Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã CatBoost, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
            if st.session_state.get("classifier_type_analysis") == "CatBoost":
                st.number_input("iterations", value=int(st.session_state.get("catboost_iterations_analysis", 100)), key="catboost_iterations_analysis", disabled=True)
                st.number_input("depth", value=int(st.session_state.get("catboost_depth_analysis", 4)), key="catboost_depth_analysis", disabled=True)
                st.number_input("learning_rate", value=float(st.session_state.get("catboost_learning_rate_analysis", 0.1)), key="catboost_learning_rate_analysis", disabled=True, format="%.4f")

        # --- –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ML ---
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ML –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏).
        # –í–∏–¥–∂–µ—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ session_state, –Ω–æ –æ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã (disabled=True).
        if st.session_state.get("classifier_type_analysis"):
            with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML", expanded=False):
                st.info("–≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É–∂–∞—Ç –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –¥–ª—è ML-–º–æ–¥–µ–ª–∏.")

                st.markdown("**–ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–Ω—Ç–æ–≤**")
                col1, col2 = st.columns(2)
                with col1:
                    st.number_input("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–Ω—Ç–æ–≤", value=int(st.session_state.get("prints_analysis_period_analysis", 5)), min_value=1, step=1, key="prints_analysis_period_analysis", disabled=True)
                with col2:
                    st.number_input("–ü–æ—Ä–æ–≥ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–æ–≤", value=float(st.session_state.get("prints_threshold_ratio_analysis", 1.5)), min_value=1.0, step=0.1, format="%.2f", key="prints_threshold_ratio_analysis", disabled=True)

                st.markdown("**–ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ M-Ratio**")
                col1, col2 = st.columns(2)
                with col1:
                    st.number_input("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ M-Ratio", value=int(st.session_state.get("m_analysis_period_analysis", 5)), min_value=1, step=1, key="m_analysis_period_analysis", disabled=True)
                with col2:
                    st.number_input("–ü–æ—Ä–æ–≥ M-Ratio", value=float(st.session_state.get("m_threshold_ratio_analysis", 1.5)), min_value=1.0, step=0.1, format="%.2f", key="m_threshold_ratio_analysis", disabled=True)

                st.markdown("**–ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ HLdir**")
                col1, col2 = st.columns(2)
                with col1:
                    st.number_input("–û–∫–Ω–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è HLdir", value=int(st.session_state.get("hldir_window_analysis", 10)), min_value=1, step=1, key="hldir_window_analysis", disabled=True)
                with col2:
                    st.number_input("–°–º–µ—â–µ–Ω–∏–µ HLdir", value=int(st.session_state.get("hldir_offset_analysis", 0)), min_value=0, step=1, key="hldir_offset_analysis", disabled=True)

        # --- –ö–æ–Ω–µ—Ü –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---

        data_files = []
        try:
            for file in os.listdir("dataCSV"):
                if file.endswith(".parquet"):
                    data_files.append(file)
        except FileNotFoundError:
            st.warning("–ü–∞–ø–∫–∞ dataCSV –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if data_files:
            with st.expander("–í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö", expanded=True):
                st.subheader("–í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
                prev_select_all = st.session_state.get("select_all_data_prev", False)
                select_all = st.checkbox("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", value=prev_select_all, key="select_all_data")
                
                selected_files = []
                checkbox_key_prefix = f"csv_analysis_"
                
                if select_all != prev_select_all:
                    for file in data_files:
                        st.session_state[f"{checkbox_key_prefix}{file}"] = select_all
                
                for i, file in enumerate(data_files):
                    is_selected = st.checkbox(file, key=f"{checkbox_key_prefix}{file}", value=st.session_state.get(f"{checkbox_key_prefix}{file}", False))
                    if is_selected:
                        selected_files.append(file)
                
                st.session_state["select_all_data_prev"] = select_all
                st.session_state["selected_files_analysis"] = selected_files
        else:
            st.info("–í –ø–∞–ø–∫–µ dataCSV –Ω–µ—Ç Parquet-—Ñ–∞–π–ª–æ–≤ (.parquet)")
            st.session_state["selected_files_analysis"] = []
    
    selected_files = st.session_state.get("selected_files_analysis", [])
    if selected_files:
        st.write(f"–í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(selected_files)}")
    else:
        st.write("–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
    
    dataframes = load_and_validate_data_files(selected_files, "analysis")

    # --- –ù–û–í–´–ô –ë–õ–û–ö: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∏–∑ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏" ---
    if st.session_state.get('run_analysis_and_plot') and dataframes:
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        del st.session_state['run_analysis_and_plot']

        with st.spinner("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤..."):
            # 1. –û–±—ä–µ–¥–∏–Ω—è–µ–º DataFrame
            try:
                combined_df = pd.concat(dataframes, ignore_index=True)
                combined_df['datetime'] = pd.to_datetime(combined_df['time'], unit='s')
                combined_df = combined_df.sort_values('datetime').reset_index(drop=True)
                st.session_state["combined_df_analysis"] = combined_df
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                st.stop() # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å

            # 2. –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            params = get_strategy_parameters("analysis")
            simulation_params = params.copy()
            simulation_params["position_size"] = position_size
            simulation_params["commission"] = commission
            simulation_params["aggressive_mode"] = st.session_state.get("aggressive_mode_analysis", False)
            
            simulation_results = run_trading_simulation(combined_df, simulation_params)
            
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∏–∂–µ
            st.session_state["simulation_results"] = simulation_results
            st.session_state["simulation_params"] = simulation_params
            
            # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            st.session_state['auto_generate_ml_plot'] = True
            st.session_state['auto_generate_screenshots'] = True

        st.success("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        # st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã UI –æ–±–Ω–æ–≤–∏–ª—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∑–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    
    if dataframes:
        try:
            combined_df = pd.concat(dataframes, ignore_index=True)
            combined_df['datetime'] = pd.to_datetime(combined_df['time'], unit='s')
            combined_df = combined_df.sort_values('datetime').reset_index(drop=True)

            # --- –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤—Å–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –æ–¥–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É ---
            unique_symbols = combined_df['Symbol'].unique()
            if len(unique_symbols) > 1:
                st.error(
                    f"–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ({', '.join(unique_symbols)}). "
                    "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –æ–¥–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É."
                )
                st.session_state["combined_df_analysis"] = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º DataFrame
                combined_df = None

            st.session_state["combined_df_analysis"] = combined_df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            combined_df = None
            st.session_state["combined_df_analysis"] = None
            
        if combined_df is not None:
            with st.spinner("–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤..."):
                try:
                    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                    params_for_signals = get_strategy_parameters("analysis")
                    signal_indices, _, _ = generate_signals(combined_df, params_for_signals)
                    st.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: **{len(signal_indices)}**")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
                    signal_indices = []
        
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏", key="run_simulation"):
            with st.spinner("–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏..."):
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ session_state –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                params = get_strategy_parameters("analysis")

                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –Ω–µ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                simulation_params = params.copy()
                simulation_params["position_size"] = position_size
                simulation_params["commission"] = commission
                simulation_params["aggressive_mode"] = st.session_state.get("aggressive_mode_analysis", False)
                
                simulation_results = run_trading_simulation(combined_df, simulation_params)
                
                st.session_state["simulation_results"] = simulation_results
                st.session_state["simulation_params"] = simulation_params
                
                st.success("–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        if "simulation_results" in st.session_state:
            results = st.session_state["simulation_results"]
            
            col1, col2, col3, col4, col5, col6 = st.columns(6)
            col1.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", results['total_trades'])
            col2.metric("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", results['winning_trades'])
            col3.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö", f"{round(results['win_rate']*100, 2):.2f}%")
            col4.metric("–û–±—â–∏–π PnL", f"${results['total_pnl']:.2f}")
            col5.metric("–°—Ä–µ–¥–Ω–∏–π PnL", f"${results['avg_pnl']:.2f}")
            col6.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", f"{round(results['max_drawdown']*100, 2):.2f}%")

            # –î–æ–±–∞–≤–ª—è–µ–º expander –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏
            with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"):
                sim_params = st.session_state.get("simulation_params", {})
                if sim_params:
                    used_params_list = results.get('used_params', [])
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ DataFrame –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    params_list = []
                    for param, value in sim_params.items():
                        is_used = "‚úÖ" if param in used_params_list else "‚Äî"
                        params_list.append({"–ü–∞—Ä–∞–º–µ—Ç—Ä": param, "–ó–Ω–∞—á–µ–Ω–∏–µ": value, "–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö": is_used})
                    params_df = pd.DataFrame(params_list)
                    params_df['–ó–Ω–∞—á–µ–Ω–∏–µ'] = params_df['–ó–Ω–∞—á–µ–Ω–∏–µ'].astype(str)  # type: ignore
                    st.dataframe(params_df, use_container_width=True)
                else:
                    st.info("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            
            # 2. –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ —Å–∏–º—É–ª—è—Ü–∏—è —Å ML, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ–ª–∏.
            if results.get('is_ml_simulation'):
                st.subheader("–ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã ML-–º–æ–¥–µ–ª–∏")
                st.info("–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –¥–≤—É–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º.")
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML-–≥—Ä–∞—Ñ–∏–∫–∞..."):
                    ml_fig = plot_ml_decision_boundary(combined_df, results, st.session_state.get("simulation_params", {}))
                    if ml_fig:
                        st.plotly_chart(ml_fig, width='stretch')
                    else:
                        st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ ML. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")

            # --- –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô –ë–õ–û–ö: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ML-–≥—Ä–∞—Ñ–∏–∫–∞ ---
            # –≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å ML-–≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–∞–π–¥–±–∞—Ä–µ,
            # –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞ –±–µ–∑ ML.
            st.subheader("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å ML")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ML (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)
            ml_params_available = st.session_state.get("classifier_type_analysis") is not None

            if not ml_params_available:
                st.info("–ß—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å ML-–≥—Ä–∞—Ñ–∏–∫, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å ML-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ '–ê–Ω–∞–ª–∏—Ç–∏–∫–∏' –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –∞–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            run_ml_plot = st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å ML-–≥—Ä–∞—Ñ–∏–∫", key="force_ml_plot", disabled=not (ml_params_available and combined_df is not None))
            if (run_ml_plot or st.session_state.get('auto_generate_ml_plot')) and ml_params_available and combined_df is not None:
                st.session_state.pop('auto_generate_ml_plot', None) # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π ML-–∞–Ω–∞–ª–∏–∑..."):
                    logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')
                    try:
                        current_params = get_strategy_parameters("analysis")
                        df = st.session_state.get("combined_df_analysis")
                        
                        # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é, –≤—ã–Ω–µ—Å–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                        fig = run_forced_ml_analysis(df, current_params)

                        if fig:
                            st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å ML-–≥—Ä–∞—Ñ–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ ML-–≥—Ä–∞—Ñ–∏–∫–∞: {e}")

            if results['trades']:
                st.subheader("–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫")
                trades_data = {
                    '–ò–Ω–¥–µ–∫—Å –≤—Ö–æ–¥–∞': [trade['entry_idx'] for trade in results['trades']],
                    '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': [trade['entry_price'] for trade in results['trades']],
                    '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': [trade['direction'] for trade in results['trades']],
                    '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞': [trade['exit_price'] for trade in results['trades']],
                    'PnL': [trade['pnl'] for trade in results['trades']],
                    '–ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞': [trade['exit_reason'] for trade in results['trades']]
                }
                trades_df_display = pd.DataFrame(trades_data)
                st.dataframe(trades_df_display, use_container_width=True)

            # –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–¥–µ–ª–æ–∫
            if results['trades']:
                st.subheader("–°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–¥–µ–ª–æ–∫")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –∞–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                run_screenshots = st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–¥–µ–ª–æ–∫", key="generate_screenshots")
                if run_screenshots or st.session_state.get('auto_generate_screenshots'):
                    st.session_state.pop('auto_generate_screenshots', None) # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
                    simulation_params = st.session_state.get("simulation_params", {})
                    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤..."):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ 3 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        cols = st.columns(3)
                        for i, trade in enumerate(results['trades']):
                            with cols[i % 3]:
                                trade_fig = plot_single_trade(combined_df, trade, window_size=50, params=st.session_state.get("simulation_params", {}))
                                st.plotly_chart(trade_fig, use_container_width=True)