import streamlit as st
import pandas as pd
from datetime import datetime
import os
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import plotly.figure_factory as ff

from signal_generator import generate_signals
from trading_simulator import run_trading_simulation
from visualizer import plot_single_trade, plot_ml_decision_boundary, plot_wfo_results
from ml_model_handler import train_ml_model, label_all_signals, generate_features
from app_utils import get_basic_settings, manage_profiles, get_strategy_parameters, load_and_validate_data_files # type: ignore

def show_analysis_page():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤".
    """
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        position_size, commission, start_date, end_date = get_basic_settings("analysis")

        manage_profiles("analysis", get_strategy_parameters)
        
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–í–∏–ª–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)")

        st.markdown("**üìä –§–∏–ª—å—Ç—Ä –æ–±—ä—ë–º–∞**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input("vol_pctl (%)", value=float(st.session_state.get("vol_pctl_analysis", 1.0)), min_value=0.01, step=0.01, key="vol_pctl_analysis")
        with col2:
            st.number_input("vol_period", value=int(st.session_state.get("vol_period_analysis", 20)), min_value=1, step=1, key="vol_period_analysis")

        st.markdown("**üìè –§–∏–ª—å—Ç—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input("rng_pctl (%)", value=float(st.session_state.get("rng_pctl_analysis", 1.0)), min_value=0.01, step=0.01, key="rng_pctl_analysis")
        with col2:
            st.number_input("range_period", value=int(st.session_state.get("range_period_analysis", 20)), min_value=1, step=1, key="range_period_analysis")

        st.markdown("**üìâ –§–∏–ª—å—Ç—Ä NATR**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input("natr_min (%)", value=float(st.session_state.get("natr_min_analysis", 0.35)), min_value=0.01, step=0.01, key="natr_min_analysis")
        with col2:
            st.number_input("natr_period", value=int(st.session_state.get("natr_period_analysis", 10)), min_value=1, step=1, key="natr_period_analysis")

        st.markdown("**üìà –§–∏–ª—å—Ç—Ä —Ä–æ—Å—Ç–∞**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input("min_growth_pct (%)", value=st.session_state.get("min_growth_pct_analysis", 1.0), min_value=-100.0, max_value=100.0, step=0.01, key="min_growth_pct_analysis")
        with col2:
            st.number_input("lookback_period", value=int(st.session_state.get("lookback_period_analysis", 20)), min_value=1, step=1, key="lookback_period_analysis")

        st.markdown("**üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input("stop_loss_pct (%)", value=float(st.session_state.get("stop_loss_pct_analysis", 2.0)), min_value=0.01, step=0.01, format="%.2f", key="stop_loss_pct_analysis")
        with col2:
            st.number_input("take_profit_pct (%)", value=float(st.session_state.get("take_profit_pct_analysis", 4.0)), min_value=0.01, step=0.01, format="%.2f", key="take_profit_pct_analysis")

        st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–ª–∫–∏**")
        col1, col2 = st.columns(2)
        with col1:
            st.number_input(
                "–û—Ç—Å—Ç—É–ø –≤–∏–ª–∫–∏ (%)", value=float(st.session_state.get("bracket_offset_pct_analysis", 0.5)),
                min_value=0.01, step=0.01, key="bracket_offset_pct_analysis", format="%.2f"
            )
        with col2:
            st.number_input(
                "–¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è (—Å–≤–µ—á–∏)", value=int(st.session_state.get("bracket_timeout_candles_analysis", 5)),
                min_value=1, step=1, key="bracket_timeout_candles_analysis"
            )
        st.checkbox(
            "–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ",
            value=st.session_state.get("simulate_slippage_analysis", True),
            key="simulate_slippage_analysis",
            help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ö—É–∂–µ —É—Ä–æ–≤–Ω—è '–≤–∏–ª–∫–∏' –≤ —Å–ª—É—á–∞–µ –≥—ç–ø–∞ (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ). –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –≤—Ö–æ–¥ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω–æ –ø–æ —É—Ä–æ–≤–Ω—é."
        )


        # --- –ù–û–í–´–ô –ë–õ–û–ö: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ML –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ ---
        st.subheader("ü§ñ ML –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
        st.number_input(
            "–¢–∞–π–º-–∞—É—Ç –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏ (—Å–≤–µ—á–∏)",
            value=int(st.session_state.get("ml_labeling_timeout_candles_analysis", 10)),
            min_value=1, step=1, key="ml_labeling_timeout_candles_analysis",
            help="–°–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –±—É–¥—É—â–µ–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ø–µ—Ö–∞/–ø—Ä–æ–≤–∞–ª–∞ —Å–∏–≥–Ω–∞–ª–∞."
        )
        st.number_input(
            "–ü–µ—Ä–∏–æ–¥ –¥–ª—è ML-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
            value=int(st.session_state.get("ml_prints_window_analysis", 10)),
            min_value=1, step=1, key="ml_prints_window_analysis",
            help="–†–∞–∑–º–µ—Ä —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ 'prints_strength', 'market_strength' –∏ 'hldir_strength'."
        )
        st.number_input("–ò—Ç–µ—Ä–∞—Ü–∏–∏ (–¥–µ—Ä–µ–≤—å—è)", value=int(st.session_state.get("ml_iterations_analysis", 300)), min_value=10, step=10, key="ml_iterations_analysis")
        st.number_input("–ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤—å–µ–≤", value=int(st.session_state.get("ml_depth_analysis", 4)), min_value=2, max_value=10, step=1, key="ml_depth_analysis")
        st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", value=float(st.session_state.get("ml_learning_rate_analysis", 0.1)), min_value=0.01, step=0.01, format="%.2f", key="ml_learning_rate_analysis")
        
        st.session_state['use_ml_filter_analysis'] = st.toggle(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ML-—Ñ–∏–ª—å—Ç—Ä",
            value=st.session_state.get('use_ml_filter_analysis', False),
            help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Å–∏–º—É–ª—è—Ç–æ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é ML-–º–æ–¥–µ–ª—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."
        )
        # --- –ö–æ–Ω–µ—Ü –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---

        data_files = []
        try:
            for file in os.listdir("dataCSV"):
                if file.endswith(".parquet"):
                    data_files.append(file)
        except FileNotFoundError:
            st.warning("–ü–∞–ø–∫–∞ dataCSV –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if data_files:
            with st.expander("–í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö", expanded=True):
                st.subheader("–í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
                prev_select_all = st.session_state.get("select_all_data_prev", False)
                select_all = st.checkbox("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", value=prev_select_all, key="select_all_data")
                
                selected_files = []
                checkbox_key_prefix = f"csv_analysis_"
                
                if select_all != prev_select_all:
                    for file in data_files:
                        st.session_state[f"{checkbox_key_prefix}{file}"] = select_all
                
                for i, file in enumerate(data_files):
                    is_selected = st.checkbox(file, key=f"{checkbox_key_prefix}{file}", value=st.session_state.get(f"{checkbox_key_prefix}{file}", False))
                    if is_selected:
                        selected_files.append(file)
                
                st.session_state["select_all_data_prev"] = select_all
                st.session_state["selected_files_analysis"] = selected_files
        else:
            st.info("–í –ø–∞–ø–∫–µ dataCSV –Ω–µ—Ç Parquet-—Ñ–∞–π–ª–æ–≤ (.parquet)")
            st.session_state["selected_files_analysis"] = []
    
    selected_files = st.session_state.get("selected_files_analysis", [])
    if selected_files:
        st.write(f"–í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(selected_files)}")
    else:
        st.write("–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
    
    dataframes = load_and_validate_data_files(selected_files, "analysis")

    # --- –ù–û–í–´–ô –ë–õ–û–ö: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∏–∑ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏" ---
    if st.session_state.get('run_analysis_and_plot') and dataframes:
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        del st.session_state['run_analysis_and_plot']

        with st.spinner("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤..."):
            # 1. –û–±—ä–µ–¥–∏–Ω—è–µ–º DataFrame
            try:
                combined_df = pd.concat(dataframes, ignore_index=True)
                combined_df['datetime'] = pd.to_datetime(combined_df['time'], unit='s')
                combined_df = combined_df.sort_values('datetime').reset_index(drop=True)
                st.session_state["combined_df_analysis"] = combined_df
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                st.stop() # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å

            # 2. –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            params = get_strategy_parameters("analysis")
            simulation_params = params.copy()
            simulation_params["position_size"] = position_size
            simulation_params["commission"] = commission
            simulation_params["aggressive_mode"] = st.session_state.get("aggressive_mode_analysis", False)

            # –ü–µ—Ä–µ–¥–∞–µ–º ML –º–æ–¥–µ–ª—å –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω–∞ –æ–±—É—á–µ–Ω–∞ –∏ —Ñ–∏–ª—å—Ç—Ä –≤–∫–ª—é—á–µ–Ω
            if st.session_state.get('use_ml_filter_analysis') and 'ml_model_bundle' in st.session_state:
                simulation_params['ml_model_bundle'] = st.session_state['ml_model_bundle']
            else:
                simulation_params.pop('ml_model_bundle', None) # –£–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            
            simulation_results = run_trading_simulation(combined_df, simulation_params)
            
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∏–∂–µ
            st.session_state["simulation_results"] = simulation_results
            st.session_state["simulation_params"] = simulation_params # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—ã–ª–∞ —Å–∏–º—É–ª—è—Ü–∏—è
            
            # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            st.session_state['auto_generate_ml_plot'] = True
            st.session_state['auto_generate_screenshots'] = True

        st.success("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        # st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã UI –æ–±–Ω–æ–≤–∏–ª—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∑–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    
    if dataframes:
        try:
            combined_df = pd.concat(dataframes, ignore_index=True)
            combined_df['datetime'] = pd.to_datetime(combined_df['time'], unit='s')
            combined_df = combined_df.sort_values('datetime').reset_index(drop=True)

            # --- –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤—Å–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –æ–¥–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É ---
            unique_symbols = combined_df['Symbol'].unique()
            if len(unique_symbols) > 1:
                st.error(
                    f"–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ({', '.join(unique_symbols)}). "
                    "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –æ–¥–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É."
                )
                st.session_state["combined_df_analysis"] = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º DataFrame
                combined_df = None

            st.session_state["combined_df_analysis"] = combined_df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            combined_df = None
            st.session_state["combined_df_analysis"] = None
            
        if combined_df is not None:
            with st.spinner("–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤..."):
                try:
                    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                    params_for_signals = get_strategy_parameters("analysis")
                    signal_indices, _, _ = generate_signals(combined_df, params_for_signals)
                    st.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: **{len(signal_indices)}**")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
                    signal_indices = []
        
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏", key="run_simulation"):
            with st.spinner("–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏..."):
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ session_state –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                params = get_strategy_parameters("analysis")

                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –Ω–µ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                simulation_params = params.copy()
                simulation_params["position_size"] = position_size
                simulation_params["commission"] = commission
                simulation_params["aggressive_mode"] = st.session_state.get("aggressive_mode_analysis", False)

                # –ü–µ—Ä–µ–¥–∞–µ–º ML –º–æ–¥–µ–ª—å –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω–∞ –æ–±—É—á–µ–Ω–∞ –∏ —Ñ–∏–ª—å—Ç—Ä –≤–∫–ª—é—á–µ–Ω
                if st.session_state.get('use_ml_filter_analysis') and 'ml_model_bundle' in st.session_state:
                    simulation_params['ml_model_bundle'] = st.session_state['ml_model_bundle']
                else:
                    simulation_params.pop('ml_model_bundle', None) # –£–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                
                simulation_results = run_trading_simulation(combined_df, simulation_params)
                
                st.session_state["simulation_results"] = simulation_results
                st.session_state["simulation_params"] = simulation_params # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—ã–ª–∞ —Å–∏–º—É–ª—è—Ü–∏—è

                st.success("–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        if "simulation_results" in st.session_state:
            results = st.session_state["simulation_results"]
            
            col1, col2, col3, col4, col5, col6 = st.columns(6)
            col1.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", results['total_trades'])
            col2.metric("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", results['winning_trades'])
            col3.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö", f"{round(results['win_rate']*100, 2):.2f}%")
            col4.metric("–û–±—â–∏–π PnL", f"${results['total_pnl']:.2f}")
            col5.metric("–°—Ä–µ–¥–Ω–∏–π PnL", f"${results['avg_pnl']:.2f}")
            col6.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", f"{round(results['max_drawdown']*100, 2):.2f}%")

            # --- –ù–û–í–´–ô –ë–õ–û–ö: –û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏ ---
            st.subheader("–û–±—É—á–µ–Ω–∏–µ ML-—Ñ–∏–ª—å—Ç—Ä–∞")
            if st.button("–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", key="train_ml_model"):
                with st.spinner("–®–∞–≥ 1/3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤..."):
                    params = get_strategy_parameters("analysis")
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏ –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    signal_indices, df_with_indicators, _ = generate_signals(combined_df, params, return_indicators=True)
                    # –û–±–æ–≥–∞—â–∞–µ–º DataFrame ML-–ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
                    df_with_features = generate_features(df_with_indicators, params)
                
                if df_with_features is not None and signal_indices:
                    with st.spinner("–®–∞–≥ 2/3: –†–∞–∑–º–µ—Ç–∫–∞ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å–æ–∑–¥–∞–Ω–∏–µ X –∏ y)..."):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏ –í–°–ï–• —Å–∏–≥–Ω–∞–ª–æ–≤
                        X, y = label_all_signals(df_with_features, signal_indices, params)
                    
                    if not X.empty and not y.empty:
                        st.info(f"–î–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ {len(y)} —Å–∏–≥–Ω–∞–ª–æ–≤ ({y.sum()} —É—Å–ø–µ—à–Ω—ã—Ö, {len(y) - y.sum()} –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö).")
                        
                        # --- –£–õ–£–ß–®–ï–ù–ò–ï: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏ ---
                        st.markdown("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                        test_size_pct = st.slider(
                            "–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏ (%)", 
                            min_value=10, max_value=50, value=30, step=5, 
                            key="ml_test_size_pct",
                            help="–ü—Ä–æ—Ü–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è. –û–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö."
                        )
                        test_size = test_size_pct / 100.0

                        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Ä—è–¥–æ–∫ (shuffle=False)
                        X_train, X_test, y_train, y_test = train_test_split( # type: ignore
                            X, y, test_size=test_size, shuffle=False
                        )
                        st.write(f"–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã: **{len(y_train)}** —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, **{len(y_test)}** –¥–ª—è —Ç–µ—Å—Ç–∞.")
                        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---

                        with st.spinner(f"–®–∞–≥ 3/3: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ CatBoost –Ω–∞ {len(y_train)} —Å–∏–≥–Ω–∞–ª–∞—Ö..."):
                            ml_params = get_strategy_parameters("analysis")
                            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ ---
                            model_bundle = train_ml_model(X_train, y_train, ml_params)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ session_state
                        st.session_state['ml_model_bundle'] = model_bundle
                        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ---
                        st.session_state['ml_training_data'] = (X_train, y_train) # type: ignore
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
                        st.session_state['ml_test_data'] = (X_test, y_test) # type: ignore

                        st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                        
                        # --- –ù–û–í–´–ô –ë–õ–û–ö: –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ ---
                        if not X_test.empty:
                            st.subheader("–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                            with st.spinner("–û—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ..."):
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                                model = model_bundle['model']
                                scaler = model_bundle['scaler']
                                feature_names = model_bundle['feature_names']
                                numerical_features = model_bundle['numerical_features']
                                
                                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–º –∂–µ —Å–∫–µ–π–ª–µ—Ä–æ–º, —á—Ç–æ –∏ –æ–±—É—á–∞—é—â–∏–µ
                                X_test_scaled = X_test.copy() # type: ignore
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                                num_features_in_df = [f for f in numerical_features if f in X_test_scaled.columns]
                                if scaler and num_features_in_df:
                                    X_test_scaled[num_features_in_df] = scaler.transform(X_test_scaled[num_features_in_df])
                                
                                # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                                y_pred = model.predict(X_test_scaled[feature_names]) # type: ignore
                                
                                y_test_series = y_test # type: ignore
                                # –°—á–∏—Ç–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏
                                col1, col2, col3, col4 = st.columns(4)
                                col1.metric("Accuracy", f"{accuracy_score(y_test_series, y_pred):.2%}")
                                col2.metric("Precision", f"{precision_score(y_test_series, y_pred, zero_division=0):.2%}")
                                col3.metric("Recall", f"{recall_score(y_test_series, y_pred, zero_division=0):.2%}")
                                col4.metric("F1-Score", f"{f1_score(y_test_series, y_pred, zero_division=0):.2%}")

                                # –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –æ—à–∏–±–æ–∫
                                cm = confusion_matrix(y_test_series, y_pred)
                                cm_fig = ff.create_annotated_heatmap(
                                    z=cm, x=['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ 0', '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ 1'], y=['–†–µ–∞–ª—å–Ω–æ 0', '–†–µ–∞–ª—å–Ω–æ 1'], 
                                    colorscale='Blues', showscale=True
                                )
                                cm_fig.update_layout(title_text='–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (Confusion Matrix)')
                                st.plotly_chart(cm_fig, use_container_width=True)
                        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –æ—Ü–µ–Ω–∫–∏ ---

                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                        st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Feature Importances)")
                        df_to_display = model_bundle['feature_importances'].copy()
                        df_to_display = df_to_display.rename(columns={'feature': '–ü—Ä–∏–∑–Ω–∞–∫', 'importance': '–í–∞–∂–Ω–æ—Å—Ç—å (%)', 'description': '–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ä–º—É–ª–∞'})
                        st.dataframe(df_to_display)

                        # --- –ù–û–í–´–ô –ë–õ–û–ö: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü —Ä–µ—à–µ–Ω–∏–π ---
                        st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü —Ä–µ—à–µ–Ω–∏–π")
                        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä —Ç–æ–ø-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
                        all_features = model_bundle['feature_names'] # type: ignore
                        if len(all_features) >= 2:
                            import itertools

                            # –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–ø-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                            num_top_features = st.slider(
                                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä",
                                min_value=2,
                                max_value=min(len(all_features), 10), # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 7, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª-–≤–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                                value=min(len(all_features), 10), # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4
                                step=1,
                                help="–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–∞—Ä–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π."
                            )

                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-N –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                            top_features = model_bundle['feature_importances']['feature'].head(num_top_features).tolist()

                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ —ç—Ç–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                            feature_pairs = list(itertools.combinations(top_features, 2))

                            st.info(f"–ë—É–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ **{len(feature_pairs)}** –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —Ç–æ–ø-{num_top_features} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")

                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏
                            cols = st.columns(2)
                            for i, (feature1, feature2) in enumerate(feature_pairs):
                                with cols[i % 2]:
                                    with st.spinner(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è '{feature1}' –∏ '{feature2}'..."):
                                        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö ---
                                        fig = plot_ml_decision_boundary(model_bundle, X_train, y_train, feature1, feature2)
                                        st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è 2D-–≥—Ä–∞—Ñ–∏–∫–∞ –≥—Ä–∞–Ω–∏—Ü —Ä–µ—à–µ–Ω–∏–π.")

                    else:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–º–µ—Ç–∫–∏ –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")

            if results['trades']:
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞–∑–¥–µ–ª—è–µ–º —Å–¥–µ–ª–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ ---
                real_trades = [t for t in results['trades'] if not t.get('skipped_by_ml')]
                st.subheader(f"–°–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ({len(real_trades)})")
                trades_data = {
                    '–ò–Ω–¥–µ–∫—Å –≤—Ö–æ–¥–∞': [trade['entry_idx'] for trade in real_trades],
                    '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': [trade['entry_price'] for trade in real_trades],
                    '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': [trade['direction'] for trade in real_trades],
                    '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞': [trade['exit_price'] for trade in real_trades],
                    'PnL': [trade['pnl'] for trade in real_trades],
                    '–ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞': [trade['exit_reason'] for trade in real_trades]
                }
                trades_df_display = pd.DataFrame(trades_data)
                st.dataframe(trades_df_display, use_container_width=True)

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–µ–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –í–°–ï —Å–¥–µ–ª–∫–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ) ---
            if results['trades']:
                st.subheader("–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è —Å–¥–µ–ª–æ–∫ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ML-—Ñ–∏–ª—å—Ç—Ä–æ–º)")
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤—Ö–æ–¥–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
                all_trades_sorted = sorted(results['trades'], key=lambda x: x['entry_idx'])
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –∞–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                run_screenshots = st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–¥–µ–ª–æ–∫", key="generate_screenshots")
                if run_screenshots or st.session_state.get('auto_generate_screenshots'):
                    st.session_state.pop('auto_generate_screenshots', None) # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
                    simulation_params = st.session_state.get("simulation_params", {})
                    with st.spinner(f"–°–æ–∑–¥–∞–Ω–∏–µ {len(all_trades_sorted)} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤..."):
                        cols = st.columns(3) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ 3 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        for i, trade in enumerate(all_trades_sorted):
                            with cols[i % 3]:
                                trade_fig = plot_single_trade(combined_df, trade, window_size=50, params=simulation_params)
                                st.plotly_chart(trade_fig, use_container_width=True)