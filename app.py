import streamlit as st
import pandas as pd
import plotly.express as px
import json
import os
from datetime import datetime
import numpy as np

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
from ui.analysis_page import show_analysis_page
from ui.optimization_page import show_optimization_page
# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –º–æ–¥—É–ª—è
# from ui.analytics_page import show_analytics_page
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã
from app_utils import load_profile_to_session_state, set_random_seed

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±—ç–∫–µ–Ω–¥ –º–æ–¥—É–ª–∏
import optuna_optimizer as wfo_optuna # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
import strategy_objectives # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–ª–µ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Streamlit Backtester",
    page_icon="üìà",
    layout="wide"
)

# --- –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∑–µ—Ä–Ω–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ ---
set_random_seed(42)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –ø—Ä–æ–≥–æ–Ω–æ–≤
os.makedirs("profiles", exist_ok=True)
os.makedirs("plots", exist_ok=True) # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
os.makedirs("optimization_runs", exist_ok=True)
os.makedirs("wfo_reports", exist_ok=True) # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è HTML-–æ—Ç—á–µ—Ç–æ–≤ WFO

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìà Streamlit Backtester")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")

# –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π
col1, col2, col3 = st.sidebar.columns(3)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ session_state –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
current_page = st.session_state.get("page", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")

with col1:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
    is_active = current_page == "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"
    btn_type = "secondary" if not is_active else "primary"
    if st.button("–ê–Ω–∞–ª–∏–∑", key="nav_analyze", type=btn_type, on_click=lambda: st.session_state.update(page="–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤")):
        st.session_state.page = "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"
        st.rerun()

with col2:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
    is_active = current_page == "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    btn_type = "secondary" if not is_active else "primary"
    if st.button("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", key="nav_optimize", type=btn_type, on_click=lambda: st.session_state.update(page="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")):
        st.session_state.page = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
        st.rerun()

with col3:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
    is_active = current_page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    btn_type = "secondary" if not is_active else "primary"
    if st.button("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", key="nav_analytics", type=btn_type, on_click=lambda: st.session_state.update(page="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")):
        st.session_state.page = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        st.rerun()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ session_state
def handle_profile_loading():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ session_state"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    if "profile_to_load" in st.session_state:
        profile_data = st.session_state["profile_to_load"]
        page_to_rerun = st.session_state.get("page_to_rerun")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥–∏ –∏–∑ session_state –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏
        del st.session_state["profile_to_load"]
        if "page_to_rerun" in st.session_state:
            del st.session_state["page_to_rerun"]
        
        # –û—á–∏—â–∞–µ–º session_state –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        page_nav = st.session_state.get("page")
        st.session_state.clear()
        st.session_state["page"] = page_nav

        if page_to_rerun == "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ session_state —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            load_profile_to_session_state(profile_data, "analysis")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if "hldir_window" in profile_data:
                st.session_state["hldir_window_analysis"] = profile_data["hldir_window"]
            
            profile_name = profile_data.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            st.success(f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –∑–∞–≥—Ä—É–∂–µ–Ω!")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if profile_name.startswith("temp_analysis_"):
                try:
                    import os
                    profile_path = os.path.join("profiles", "analysis", f"{profile_name}.json")
                    if os.path.exists(profile_path):
                        os.remove(profile_path)
                except Exception as e:
                    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {str(e)}")
                
        elif page_to_rerun == "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ session_state —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            load_profile_to_session_state(profile_data, "optimization")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if "hldir_window_min" in profile_data:
                st.session_state["hldir_window_min_optimization"] = profile_data["hldir_window_min"]
            if "hldir_window_max" in profile_data:
                st.session_state["hldir_window_max_optimization"] = profile_data["hldir_window_max"]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∏–º–∞–∫—Å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
            if profile_data.get("use_climax_exit") == ("categorical", [True]):
                st.session_state["use_climax_exit_option"] = "–î–∞"

            
            st.success(f"–î–∏–∞–ø–∞–∑–æ–Ω—ã '{profile_data.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}' –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –≤—ã—Ö–æ–¥–∏–º
            return
            
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤–∏–¥–∂–µ—Ç–æ–≤
        st.rerun()

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if current_page == "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤":
    handle_profile_loading() # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ app.py, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    show_analysis_page()

elif current_page == "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è":
    handle_profile_loading()
    show_optimization_page()

elif current_page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    st.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    st.subheader("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ–≥–æ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    from app_utils import get_optimization_run_files, load_run_data_cached
    
    # --- –ù–û–í–´–ô –ë–õ–û–ö: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö HTML-–æ—Ç—á–µ—Ç–æ–≤ WFO ---
    st.subheader("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ HTML-–æ—Ç—á–µ—Ç—ã WFO")
    report_dir = "wfo_reports"
    try:
        report_files = sorted(
            [f for f in os.listdir(report_dir) if f.endswith('.html')],
            reverse=True
        )
        if report_files:
            for report_file in report_files:
                file_path = os.path.join(report_dir, report_file)
                with open(file_path, "rb") as fp:
                    st.download_button(
                        label=f"üìÑ {report_file}",
                        data=fp,
                        file_name=report_file,
                        mime="text/html",
                        key=f"download_{report_file}"
                    )
        else:
            st.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö HTML-–æ—Ç—á–µ—Ç–æ–≤ WFO.")
    except FileNotFoundError:
        st.info("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ 'wfo_reports' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    st.markdown("---")
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

    run_files = get_optimization_run_files()
    
    if run_files:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥–æ–Ω—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Ä—è–¥
        for run_file in run_files:
            run_name = run_file.replace('.json', '')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            run_data = load_run_data_cached(run_file)
            if run_data is None:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            with st.container():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º columns –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–æ–∫
                cols = st.columns([1, 8])  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É: –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è, –Ω–∞–∑–≤–∞–Ω–∏–µ
                
                with cols[0]:
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    show_results_key = f"show_results_{run_name}"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–Ω–∞ –Ω–∞–∂–∞—Ç–∞
                    button_label = "‚ñº" if st.session_state.get(show_results_key, False) else "‚ñ∂"
                    if st.button(button_label, key=show_results_key + "_button"):
                        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
                        st.session_state[show_results_key] = not st.session_state.get(show_results_key, False)
                        st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    
                with cols[1]:
                    st.markdown(f"**{run_name}**")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
            if st.session_state.get(show_results_key, False):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ top_10_results (–¥–ª—è Optuna) –∏–ª–∏ –≤ results (–¥–ª—è WFO)
                if run_data is not None:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                    if "top_10_results" in run_data and run_data["top_10_results"]:
                        # –î–ª—è Optuna —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º top_10_results
                        results_data = run_data["top_10_results"]
                        # –î–æ–±–∞–≤–ª—è–µ–º ID –∫ –∫–∞–∂–¥–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        for i, result in enumerate(results_data):
                            if 'ID' not in result:
                                result['ID'] = i + 1
                        results_df = pd.DataFrame(results_data)
                    elif "results" in run_data and run_data["results"]:
                        # –î–ª—è WFO —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º results
                        results_df = pd.DataFrame(run_data["results"])
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    
                    # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–µ –∫–Ω–æ–ø–æ–∫ –∏ –º–µ—Ç—Ä–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ ---
                    with st.container():
                        action_cols = st.columns([2, 2, 4])
                        with action_cols[0]:
                            if st.button(f"‚Üí –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", key=f"optimizer_{run_name}"):
                                optimization_data = {**run_data.get("ranges", {}), **run_data.get("settings", {})}
                                load_profile_to_session_state(optimization_data, "optimization")
                                st.session_state["page"] = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
                                st.rerun()
                        
                        with action_cols[1]:
                            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∞–Ω–∞–ª–∏–∑ —Å –ª—É—á—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                            if st.button(f"‚Üí –ê–Ω–∞–ª–∏–∑ (–ª—É—á—à–∏–π)", key=f"analysis_from_run_{run_name}"):
                                best_params = run_data.get("best_params", {})
                                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ: –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã + –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                analysis_data = {**run_data.get("settings", {}), **best_params}
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –ø—Ä–æ–≥–æ–Ω–µ
                                if "data_files" in run_data:
                                    analysis_data["selected_files"] = run_data["data_files"]
                                
                                # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–Ω—Å–æ–ª—å ---
                                import pprint
                                print(f"\n[LOG] –ü–µ—Ä–µ–¥–∞—á–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ '–ê–Ω–∞–ª–∏—Ç–∏–∫–∏' -> '–ê–Ω–∞–ª–∏–∑' (–ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–Ω–∞ '{run_name}'):")
                                pprint.pprint(analysis_data)
                                print("-" * 70)
                                # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
                                load_profile_to_session_state(analysis_data, "analysis") # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ session_state
                                st.session_state["page"] = "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"
                                st.rerun()

                        with action_cols[2]:
                            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                            top_results = run_data.get("top_10_results", [])
                            if top_results:
                                best_result = top_results[0]
                                total_pnl = best_result.get('PnL', 0) or best_result.get('total_pnl', 0)
                                if total_pnl is None or (isinstance(total_pnl, float) and np.isnan(total_pnl)):
                                    pnl = 'N/A'
                                else:
                                    pnl = f"${total_pnl:.2f}" if isinstance(total_pnl, (int, float)) else str(total_pnl)

                                win_rate = best_result.get('Win Rate', 0) or best_result.get('win_rate', 0)
                                if win_rate is None or (isinstance(win_rate, float) and np.isnan(win_rate)):
                                    win_rate_formatted = 'N/A'
                                elif isinstance(win_rate, (int, float)):
                                    win_rate_formatted = f"{round(win_rate * 100, 2) if win_rate <= 1 else win_rate:.2f}%"
                                else:
                                    win_rate_formatted = str(win_rate)
                            else:
                                best_result = run_data.get("best_result", {})
                                total_pnl = best_result.get('total_pnl', 0)
                                if total_pnl is None or (isinstance(total_pnl, float) and np.isnan(total_pnl)):
                                    pnl = 'N/A'
                                else:
                                    pnl = f"${total_pnl:.2f}"

                                win_rate = best_result.get('win_rate', 0)
                                if win_rate is None or (isinstance(win_rate, float) and np.isnan(win_rate)):
                                    win_rate_formatted = 'N/A'
                                else:
                                    win_rate_formatted = f"{round(win_rate * 100, 2) if win_rate <= 1 else win_rate:.2f}%"

                            st.caption(f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: PnL: {pnl}, WR: {win_rate_formatted}")

                    # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –º–µ—Ç—Ä–∏–∫ ---

                    # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    # –°–Ω–∞—á–∞–ª–∞ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    desired_order = [
                        "ID",
                        "value", # –¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ Optuna
                        "total_pnl", "total_trades", "win_rate", "max_drawdown", "profit_factor",
                        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                        "PnL", "Total Trades", "Win Rate", "Max Drawdown", "Profit Factor", "SQN",
                        # –ó–∞—Ç–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                        "vol_pctl", "vol_period", "rng_pctl", "range_period", "natr_min", "natr_period",
                        "min_growth_pct", "lookback_period", "prints_analysis_period", "prints_threshold_ratio",
                        "stop_loss_pct", "take_profit_pct",
                        "bracket_offset_pct", "bracket_timeout_candles"
                    ]
                    
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ desired_order –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ DataFrame
                    available_columns = [col for col in desired_order if col in results_df.columns]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –≤ `desired_order`, –≤ –∫–æ–Ω–µ—Ü.
                    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü –Ω–µ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.
                    # `dict.fromkeys` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Ä—è–¥–∫–∞.
                    additional_columns = [col for col in results_df.columns if col not in available_columns]
                    final_order = available_columns + additional_columns
                    
                    results_df_display = results_df[final_order]
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∂–∏–º 1)
                    display_df = results_df_display.copy()

                    # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ ---
                    percent_columns = ['max_drawdown', 'Max Drawdown', 'win_rate', 'Win Rate']
                    for col_name in percent_columns:
                        if col_name in display_df.columns:
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–ø—É—Å–∫–∏
                            display_df[col_name] = display_df[col_name].apply(
                                lambda x: f"{x * 100:.2f}%" if isinstance(x, (int, float)) and pd.notnull(x) else x
                            )
                    # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---


                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    selected_result_key = f"selected_result_{run_name}"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∞–Ω–∞–ª–∏–∑ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                    st.write("**–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:**")
                    # –°–æ–∑–¥–∞–µ–º –¥–æ 10 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                    button_cols = st.columns(min(len(results_df), 10)) 
                    for i, col in enumerate(button_cols):
                        with col:
                            result_row = results_df.iloc[i]
                            result_id = result_row.get('ID', i + 1)
                            if st.button(f"{result_id}", key=f"select_{run_name}_result_{i}", help=f"–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {result_id} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '–ê–Ω–∞–ª–∏–∑'"):
                                selected_params_from_row = {k: v for k, v in result_row.items() if k != 'ID'}
                                full_params_to_load = {**run_data.get("settings", {}), **selected_params_from_row}

                                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –ø—Ä–æ–≥–æ–Ω–µ
                                if "data_files" in run_data:
                                    full_params_to_load["selected_files"] = run_data["data_files"]
                                
                                load_profile_to_session_state(full_params_to_load, "analysis")
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                                st.session_state['run_analysis_and_plot'] = True

                                st.session_state["page"] = "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"
                                st.rerun()

                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    st.dataframe(display_df, use_container_width=True)

                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            st.markdown("---")
    else:
        st.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")