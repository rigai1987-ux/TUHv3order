"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ—à–∞–≥–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (Walk-Forward Optimization).

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç `optuna_optimizer` –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö
–ø–µ—Ä–∏–æ–¥–∞—Ö (in-sample) –∏ –∑–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Ö –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö, –Ω–µ–≤–∏–¥–∏–º—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö
(out-of-sample) –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–æ–±–∞—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
"""

import os
import pandas as pd
from datetime import timedelta
from joblib import Parallel, delayed
from signal_generator import find_future_outcomes
import optuna_optimizer
from trading_simulator import run_trading_simulation
import streamlit as st
import numpy as np

def suggest_new_ranges_from_wfo(wfo_summary_df: pd.DataFrame, initial_param_space: dict) -> dict:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã WFO –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–µ, —Å—É–∂–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

    Args:
        wfo_summary_df (pd.DataFrame): –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —à–∞–≥–∞–º WFO.
        initial_param_space (dict): –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –±—ã–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏.
    """
    if wfo_summary_df.empty:
        return {}

    # 1. –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —à–∞–≥–∏ (–≥–¥–µ PnL –Ω–∞ —Ç–µ—Å—Ç–µ > 0)
    successful_steps = wfo_summary_df[wfo_summary_df['out_sample_pnl'] > 0]

    if len(successful_steps) < 3: # –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤ WFO –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.")
        return {}

    suggested_ranges = {}
    # 2. –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    for param_name, (param_type, *_) in initial_param_space.items():
        if param_name in successful_steps.columns and param_type in ["int", "float"]:
            values = successful_steps[param_name].dropna()
            if len(values) > 1:
                # 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è –æ—Ç—Å–µ—á–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
                new_min = values.quantile(0.10)
                new_max = values.quantile(0.90)

                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏ –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö float
                suggested_ranges[param_name] = {
                    "min": round(new_min, 4) if param_type == "float" else int(new_min),
                    "max": round(new_max, 4) if param_type == "float" else int(new_max)
                }
    return suggested_ranges

def run_wfo(
    data: pd.DataFrame,
    wfo_params: dict,
    opt_params: dict,
    use_screening: bool = True,
    objective_name: str = "SQN", # –ò–º—è —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    show_progress_ui: bool = True # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ UI –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª Walk-Forward Optimization.

    Args:
        data (pd.DataFrame): –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è WFO.
        wfo_params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è WFO (—Ä–∞–∑–º–µ—Ä—ã –æ–∫–æ–Ω, —à–∞–≥).
            - train_period: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∫–Ω–∞ –æ–±—É—á–µ–Ω–∏—è.
            - test_period: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∫–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
            - step_period: –®–∞–≥ —Å–¥–≤–∏–≥–∞ –æ–∫–Ω–∞.
            - wfo_unit: –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è ('–î–Ω–∏' –∏–ª–∏ '–ß–∞—Å—ã').
        opt_params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Optuna-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ `run_optimization`.
        use_screening (bool): –ï—Å–ª–∏ True, –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
        objective_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI.
        show_progress_ui (bool): –ï—Å–ª–∏ False, UI –Ω–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è.
    """
    train_period = wfo_params['train_period']
    test_period = wfo_params['test_period']
    step_period = wfo_params['step_period']
    wfo_unit = wfo_params.get('wfo_unit', '–î–Ω–∏')

    start_date_data = data['datetime'].min()
    end_date_data = data['datetime'].max()

    if wfo_unit == '–î–Ω–∏':
        time_unit = timedelta(days=1)
        total_duration = (end_date_data - start_date_data).days
        train_duration = timedelta(days=train_period)
        test_duration = timedelta(days=test_period)
        step_duration = timedelta(days=step_period)
    else: # –ß–∞—Å—ã
        time_unit = timedelta(hours=1)
        total_duration = int((end_date_data - start_date_data).total_seconds() / 3600)
        train_duration = timedelta(hours=train_period)
        test_duration = timedelta(hours=test_period)
        step_duration = timedelta(hours=step_period)

    if total_duration < (train_period + test_period):
        st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è WFO —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –æ–∫–æ–Ω.")
        return {"summary": [], "aggregated_metrics": {}, "equity_curve": pd.DataFrame()}

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ü–∏–∫–ª–∞ WFO
    current_start_date = start_date_data
    out_of_sample_results = []
    wfo_summary = []
    all_oos_trades = [] # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä–∏–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    previous_best_params = None # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞

    if show_progress_ui:
        pbar = st.progress(0)
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤
    total_walk_duration = total_duration - train_period - test_period
    if total_walk_duration < 0:
        total_steps = 0
    else:
        total_steps = (total_walk_duration // step_period) + 1

    step_count = 0

    while current_start_date + train_duration + test_duration <= end_date_data:
        step_count += 1
        
        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç
        train_start_date = current_start_date
        train_end_date = train_start_date + train_duration
        test_start_date = train_end_date
        test_end_date = test_start_date + test_duration

        if show_progress_ui:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–≥–µ –∏ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
            step_container = st.container()
            with step_container:
                info_cols = st.columns([4, 1, 1]) # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –º–µ—Ç—Ä–∏–∫–∏ –∏ –∫–æ–ª-–≤–∞ —Å–¥–µ–ª–æ–∫

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–∞—Ç –¥–ª—è UI
        date_format = "%Y-%m-%d" if wfo_unit == "–î–Ω–∏" else "%Y-%m-%d %H:%M"
        train_period_str = f"{train_start_date.strftime(date_format)} : {train_end_date.strftime(date_format)}"
        test_period_str = f"{test_start_date.strftime(date_format)} : {test_end_date.strftime(date_format)}"

        # 3. –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º
        # –°–æ–∑–¥–∞–µ–º —è–≤–Ω—ã–µ –∫–æ–ø–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å SettingWithCopyWarning
        train_data = data[(data['datetime'] >= train_start_date) & (data['datetime'] < train_end_date)].copy()
        test_data = data[(data['datetime'] >= test_start_date) & (data['datetime'] < test_end_date)].copy()

        if train_data.empty or test_data.empty:
            st.warning(f"–ü—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–∏–æ–¥–µ.")
            current_start_date += step_duration
            continue

        # 3.5. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ–≤–æ–¥–∏–º —Å–∫—Ä–∏–Ω–∏–Ω–≥ "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö" —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if use_screening:
            if show_progress_ui:
                st.write("üî¨ **–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞.**")
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –∏–∑ wfo_params
            look_forward_period = wfo_params.get('look_forward_period', 20)
            profit_target_pct = wfo_params.get('profit_target_pct', 2.0)
            loss_limit_pct = wfo_params.get('loss_limit_pct', 1.0)
            
            promising_long, promising_short = find_future_outcomes(
                train_data['high'].values, train_data['low'].values,
                int(look_forward_period), profit_target_pct / 100, loss_limit_pct / 100
            )
            train_data['promising_long'] = promising_long
            train_data['promising_short'] = promising_short
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            num_promising_long = np.sum(promising_long)
            num_promising_short = np.sum(promising_short)
            if show_progress_ui:
                st.write(f"üîç –ù–∞–π–¥–µ–Ω–æ {num_promising_long} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö long –∏ {num_promising_short} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö short —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")

        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –æ–∫–Ω–µ (In-Sample)
        opt_params['data'] = train_data
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–± –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ WFO –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        opt_params['n_trials'] = wfo_params.get('trials_per_step', 25)
        # –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏,
        # —á—Ç–æ–±—ã —Ü–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–Ω–∞–ª–∞, –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç–∞—Ç—å.
        opt_params['screening_mode_on_train'] = use_screening
        # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Ä–æ–≥ –ø–æ —Å–¥–µ–ª–∫–∞–º –≤ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ø–∞–ª –≤ —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –ø–µ—Ä–µ–¥–∞–µ–º "–∞–Ω–∫–µ—Ä–Ω—ã–µ" –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ ---
        if wfo_params.get('use_anchoring') and previous_best_params:
            opt_params['seed_params'] = previous_best_params

        if 'base_settings' not in opt_params:
            opt_params['base_settings'] = {}
        opt_params['base_settings']['min_trades_threshold'] = wfo_params.get('min_trades_threshold', 10)

        in_sample_opt_results = optuna_optimizer.run_optimization(opt_params)

        if not in_sample_opt_results or not in_sample_opt_results.get('best_params'):
            st.warning(f"–ù–∞ —à–∞–≥–µ {step_count} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫.")
            current_start_date += step_duration
            continue

        # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–π –ø—Ä–æ–±—ã –∏ –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
        is_multi_objective = "multi" in str(opt_params.get('direction', ''))
        best_trial = None
        study = in_sample_opt_results.get('study')

        if study:
            if is_multi_objective:
                # –î–ª—è –º–Ω–æ–≥–æ—Ü–µ–ª–µ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –ø–µ—Ä–≤–æ–π –º–µ—Ç—Ä–∏–∫–µ (SQN)
                best_trials = sorted(study.best_trials, key=lambda t: t.values[0], reverse=True)
                if best_trials:
                    best_trial = best_trials[0]
            else:
                # –î–ª—è –æ–¥–Ω–æ—Ü–µ–ª–µ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º best_trial
                best_trial = study.best_trial

        best_params = best_trial.params if best_trial else in_sample_opt_results['best_params']
        best_value = best_trial.values if best_trial and is_multi_objective else (best_trial.value if best_trial else in_sample_opt_results['best_value'])

        # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ ---
        previous_best_params = best_params.copy()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª—É—á—à–µ–π –ø—Ä–æ–±—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        best_trial_sim_results = best_trial.user_attrs if best_trial else {}
        feature_importances = best_trial_sim_results.get('feature_importances')

        if show_progress_ui:
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ –∏ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            with step_container:
                with info_cols[0]:
                    st.info(f"**–®–∞–≥ {step_count}/{total_steps}**: –û–±—É—á–µ–Ω–∏–µ [{train_period_str}], –¢–µ—Å—Ç [{test_period_str}]")
                
                main_metric_label = objective_name.split('(')[0].strip()
                with info_cols[1]:
                    if is_multi_objective:
                        st.metric(label=f"–ú–µ—Ç—Ä–∏–∫–∞ ({main_metric_label})", value=f"{best_value[0]:.4f}", help=f"–õ—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —à–∞–≥–µ {step_count} (In-Sample)")
                    else:
                        st.metric(label=f"–ú–µ—Ç—Ä–∏–∫–∞ ({main_metric_label})", value=f"{best_value:.4f}", help=f"–õ—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —à–∞–≥–µ {step_count} (In-Sample)")
                with info_cols[2]:
                    st.metric(label="–°–¥–µ–ª–æ–∫ (In-Sample)", value=best_trial_sim_results.get('total_trades', 'N/A'), help=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫, –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å –ª—É—á—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–∞ —à–∞–≥–µ {step_count}")

            # –í —Å–ø–æ–π–ª–µ—Ä–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            with st.expander(f"‚öôÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ —à–∞–≥–µ {step_count}"):
                    st.json(best_params)
        else:
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ UI –æ—Ç–∫–ª—é—á–µ–Ω
            print(f"WFO –®–∞–≥ {step_count}/{total_steps} –∑–∞–≤–µ—Ä—à–µ–Ω.")

        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫–Ω–µ (Out-of-Sample)
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ opt_params –∏ –ª—É—á—à–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
        # best_params –±—É–¥—É—Ç –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –∫–ª—é—á–µ–π.
        simulation_params = {
            **opt_params.get('base_settings', {}),
            **best_params
        }
        
        out_of_sample_run = run_trading_simulation(test_data, simulation_params, screening_mode=False) # –ù–∞ —Ç–µ—Å—Ç–µ —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
        out_of_sample_results.append(out_of_sample_run)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ —à–∞–≥–∞ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
        if out_of_sample_run['trades']:
            trades_df = pd.DataFrame(out_of_sample_run['trades'])
            # –í–∞–∂–Ω–æ: exit_idx –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ test_data, –∞ –Ω–µ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É data.
            # –ü–æ—ç—Ç–æ–º—É exit_time –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ test_data.
            trades_df['exit_time'] = test_data['datetime'].iloc[trades_df['exit_idx']].values
            all_oos_trades.append(trades_df)
        
        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —à–∞–≥—É
        summary_step = {
            "step": step_count,
            "train_period": train_period_str,
            "test_period": test_period_str,
            "in_sample_metric": in_sample_opt_results['best_value'],
            "out_sample_pnl": out_of_sample_run['total_pnl'],
            "out_sample_trades": out_of_sample_run['total_trades'],
            "out_sample_win_rate": out_of_sample_run['win_rate'],
            "feature_importances": feature_importances, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        }
        # –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
        summary_step.update(best_params)
        wfo_summary.append(summary_step)

        # 7. –°–¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ
        current_start_date += step_duration
        if show_progress_ui:
            pbar.progress(step_count / total_steps if total_steps > 0 else 1.0)

    if show_progress_ui:
        pbar.progress(1.0)
    st.success("Walk-Forward –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    # 8. –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if not out_of_sample_results:
        return {"summary": [], "aggregated_metrics": {}, "equity_curve": pd.DataFrame()}

    # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π DataFrame –¥–ª—è –∫—Ä–∏–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    equity_curve_df = pd.DataFrame()
    if all_oos_trades:
        full_trades_df = pd.concat(all_oos_trades).sort_values('exit_time').reset_index(drop=True)
        full_trades_df['cumulative_pnl'] = full_trades_df['pnl'].cumsum()
        equity_curve_df = full_trades_df[['exit_time', 'cumulative_pnl']]

    # –†–∞—Å—á–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    total_pnl = equity_curve_df['cumulative_pnl'].iloc[-1] if not equity_curve_df.empty else 0
    all_trades_count = sum([res['total_trades'] for res in out_of_sample_results])
    all_wins = sum([res['winning_trades'] for res in out_of_sample_results])
    
    all_pnl_history = [pnl for res in out_of_sample_results for pnl in res['pnl_history']]
    if all_pnl_history:
        profits = np.sum([p for p in all_pnl_history if p > 0])
        losses = np.abs(np.sum([p for p in all_pnl_history if p < 0]))
        profit_factor = profits / losses if losses > 0 else float('inf')
    else:
        profit_factor = 0

    aggregated_metrics = {
        "total_out_of_sample_pnl": total_pnl,
        "total_out_of_sample_trades": all_trades_count,
        "overall_win_rate": all_wins / all_trades_count if all_trades_count > 0 else 0,
        "overall_profit_factor": profit_factor
    }

    # 9. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤
    wfo_summary_df = pd.DataFrame(wfo_summary)
    suggested_ranges = suggest_new_ranges_from_wfo(wfo_summary_df, opt_params['param_space'])

    return {
        "summary": wfo_summary, "aggregated_metrics": aggregated_metrics, 
        "equity_curve": equity_curve_df, "suggested_ranges": suggested_ranges
    }

def _wfo_optimization_task(task_params):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π —Å joblib.
    """
    step_count = task_params['step_count']
    total_steps = task_params['total_steps']
    opt_params = task_params['opt_params']
    opt_params['n_jobs'] = 1 # –í–ê–ñ–ù–û: –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ WFO –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    
    print(f"Starting parallel WFO optimization for step {step_count}/{total_steps}...")
    in_sample_opt_results = optuna_optimizer.run_optimization(opt_params)
    print(f"Finished parallel WFO optimization for step {step_count}/{total_steps}.")
    
    task_params['in_sample_opt_results'] = in_sample_opt_results
    return task_params


def run_wfo_parallel(
    data: pd.DataFrame,
    wfo_params: dict,
    opt_params: dict,
    use_screening: bool = True
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç WFO, –≤—ã–ø–æ–ª–Ω—è—è —Ñ–∞–∑—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
    –≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—à–∞–≥–æ–≤–æ–≥–æ UI.
    """
    # 1. --- –§–∞–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: –Ω–∞—Ä–µ–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á ---
    st.info("–§–∞–∑–∞ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è WFO...")
    
    train_period = wfo_params['train_period']
    test_period = wfo_params['test_period']
    step_period = wfo_params['step_period']
    wfo_unit = wfo_params.get('wfo_unit', '–î–Ω–∏')

    start_date_data = data['datetime'].min()
    end_date_data = data['datetime'].max()

    if wfo_unit == '–î–Ω–∏':
        total_duration = (end_date_data - start_date_data).days
        train_duration = timedelta(days=train_period)
        test_duration = timedelta(days=test_period)
        step_duration = timedelta(days=step_period)
    else: # –ß–∞—Å—ã
        total_duration = int((end_date_data - start_date_data).total_seconds() / 3600)
        train_duration = timedelta(hours=train_period)
        test_duration = timedelta(hours=test_period)
        step_duration = timedelta(hours=step_period)

    if total_duration < (train_period + test_period):
        st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è WFO —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –æ–∫–æ–Ω.")
        return {"summary": [], "aggregated_metrics": {}, "equity_curve": pd.DataFrame()}

    total_walk_duration = total_duration - train_period - test_period
    total_steps = (total_walk_duration // step_period) + 1 if total_walk_duration >= 0 else 0

    tasks = []
    current_start_date = start_date_data
    for i in range(total_steps):
        train_start_date = current_start_date
        train_end_date = train_start_date + train_duration
        test_start_date = train_end_date
        test_end_date = test_start_date + test_duration

        train_data = data[(data['datetime'] >= train_start_date) & (data['datetime'] < train_end_date)].copy()
        test_data = data[(data['datetime'] >= test_start_date) & (data['datetime'] < test_end_date)].copy()

        if train_data.empty or test_data.empty:
            current_start_date += step_duration
            continue

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
        task_opt_params = opt_params.copy()
        task_opt_params['data'] = train_data
        task_opt_params['n_trials'] = wfo_params.get('trials_per_step', 25)
        task_opt_params['screening_mode_on_train'] = use_screening
        if 'base_settings' not in task_opt_params: task_opt_params['base_settings'] = {}
        task_opt_params['base_settings']['min_trades_threshold'] = wfo_params.get('min_trades_threshold', 10)

        tasks.append({
            "step_count": i + 1,
            "total_steps": total_steps,
            "train_data": train_data,
            "test_data": test_data,
            "opt_params": task_opt_params,
            "wfo_params": wfo_params,
            "use_screening": use_screening,
            "train_period_str": f"{train_start_date:%Y-%m-%d} : {train_end_date:%Y-%m-%d}",
            "test_period_str": f"{test_start_date:%Y-%m-%d} : {test_end_date:%Y-%m-%d}",
        })
        current_start_date += step_duration

    # 2. --- –§–∞–∑–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ---
    n_jobs = os.cpu_count() or 1
    with st.spinner(f"–§–∞–∑–∞ 2: –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ {n_jobs} —è–¥—Ä–∞—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏..."):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'loky' –±—ç–∫–µ–Ω–¥. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –≤–º–µ—Å—Ç–æ –ø–æ—Ç–æ–∫–æ–≤, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç
        # –ª—É—á—à—É—é –∏–∑–æ–ª—è—Ü–∏—é –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É Numba-—É—Å–∫–æ—Ä–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ—Å—Ç–∏—á—å 100% –∑–∞–≥—Ä—É–∑–∫–∏ –¶–ü –Ω–∞ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.
        # –í–ê–ñ–ù–û: –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º n_jobs –≤ run_optimization –Ω–∞–ø—Ä—è–º—É—é.
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –º—ã –≥–æ–≤–æ—Ä–∏–º joblib –∑–∞–ø—É—Å—Ç–∏—Ç—å `n_jobs` –∑–∞–¥–∞—á,
        # –∞ –∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —è–¥—Ä–æ.
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç joblib
        # —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ—Å—É—Ä—Å–∞–º–∏.
        completed_tasks = Parallel(n_jobs=n_jobs, backend='loky')(delayed(_wfo_optimization_task)(task) for task in tasks)

    st.info("–§–∞–∑–∞ 3: –°–±–æ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Out-of-Sample –¥–∞–Ω–Ω—ã—Ö...")

    # 3. --- –§–∞–∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ ---
    wfo_summary = []
    all_oos_trades = []
    out_of_sample_results = []

    for task in sorted(completed_tasks, key=lambda x: x['step_count']):
        in_sample_opt_results = task['in_sample_opt_results']
        
        if not in_sample_opt_results or not in_sample_opt_results.get('best_params'):
            st.warning(f"–ù–∞ —à–∞–≥–µ {task['step_count']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫.")
            continue

        best_params = in_sample_opt_results['best_params']

        # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ feature_importances –∏–∑ –ª—É—á—à–µ–π –ø—Ä–æ–±—ã ---
        feature_importances = None
        study = in_sample_opt_results.get('study')
        if study and study.best_trial:
            feature_importances = study.best_trial.user_attrs.get('feature_importances')
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ---

        simulation_params = {**task['opt_params'].get('base_settings', {}), **best_params}
        
        out_of_sample_run = run_trading_simulation(task['test_data'], simulation_params, screening_mode=False)
        out_of_sample_results.append(out_of_sample_run)

        if out_of_sample_run['trades']:
            trades_df = pd.DataFrame(out_of_sample_run['trades'])
            trades_df['exit_time'] = task['test_data']['datetime'].iloc[trades_df['exit_idx']].values
            all_oos_trades.append(trades_df)

        summary_step = {
            "step": task['step_count'],
            "train_period": task['train_period_str'],
            "test_period": task['test_period_str'],
            "in_sample_metric": in_sample_opt_results['best_value'],
            "out_sample_pnl": out_of_sample_run['total_pnl'],
            "out_sample_trades": out_of_sample_run['total_trades'],
            "out_sample_win_rate": out_of_sample_run['win_rate'],
            "feature_importances": feature_importances, # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        }
        summary_step.update(best_params)
        wfo_summary.append(summary_step)

    st.success("Walk-Forward –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    # --- –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ run_wfo) ---
    if not out_of_sample_results:
        return {"summary": [], "aggregated_metrics": {}, "equity_curve": pd.DataFrame()}

    equity_curve_df = pd.DataFrame()
    if all_oos_trades:
        full_trades_df = pd.concat(all_oos_trades).sort_values('exit_time').reset_index(drop=True)
        full_trades_df['cumulative_pnl'] = full_trades_df['pnl'].cumsum()
        equity_curve_df = full_trades_df[['exit_time', 'cumulative_pnl']]

    total_pnl = equity_curve_df['cumulative_pnl'].iloc[-1] if not equity_curve_df.empty else 0
    all_trades_count = sum(res['total_trades'] for res in out_of_sample_results)
    all_wins = sum(res['winning_trades'] for res in out_of_sample_results)
    all_pnl_history = [pnl for res in out_of_sample_results for pnl in res['pnl_history']]
    profit_factor = np.sum([p for p in all_pnl_history if p > 0]) / np.abs(np.sum([p for p in all_pnl_history if p < 0])) if any(p < 0 for p in all_pnl_history) else float('inf')

    aggregated_metrics = {"total_out_of_sample_pnl": total_pnl, "total_out_of_sample_trades": all_trades_count, "overall_win_rate": all_wins / all_trades_count if all_trades_count > 0 else 0, "overall_profit_factor": profit_factor}
    wfo_summary_df = pd.DataFrame(wfo_summary)
    suggested_ranges = suggest_new_ranges_from_wfo(wfo_summary_df, opt_params['param_space'])

    return {"summary": wfo_summary, "aggregated_metrics": aggregated_metrics, "equity_curve": equity_curve_df, "suggested_ranges": suggested_ranges}